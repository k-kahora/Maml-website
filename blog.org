
* Getting Started
>Goal-> Create a website where users could evaluate my programming language graffiti hosted on the cloud

I undestand that serverless means I will have to host my app as a docker container, however I never use docker locally due to my experince of it being much slower than an non containerized local install.  I use nix for local environments so it makse sense to use nix to make my dockeimage  [[https://johns.codes/blog/rust-enviorment-and-docker-build-with-nix-flakes][docker-nix]] was A great resource to get started.  

* Poetry2Nix

This is super nice it makes building a python derivation super straight forward [[https://github.com/nix-community/poetry2nix/blob/master/bin/poetry2nix][poetry2nix]] also see examlpe usage here from [[https://www.tweag.io/blog/2020-08-12-poetry2nix/][tweag]]. 


What I needed to do to set up the project
#+begin_src sh

poetry new <project-name>
poetry build

poetry add <dependencies> <dependencies> ... 

#+end_src

This is the best way I have found for poetry to set up the instance with everything in the proper spot

* Getting the dummy program working


This is neede or else your result will be empty
#+begin_src toml
[tool.poetry.scripts]
runner = "project_new.app:main"
#+end_src

This is the app file, it will contain your main script. 

#+begin_src python
def main():
    print("bruh")
#+end_src 

#+begin_src sh

poetry run runner

#+end_src 

* Getting your app running as a flake

I am not going to explain all this but essentialy you create a derivation with the poetry2nix which then can set as a default package output

#+begin_src nix
{
  description = "A simple poetry project";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
    flake-utils.url = "github:numtide/flake-utils";
    poetry2nix.url = "github:nix-community/poetry2nix";
  };

  outputs = { self, nixpkgs, flake-utils, poetry2nix }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
        inherit (poetry2nix.lib.mkPoetry2Nix { inherit pkgs; }) mkPoetryApplication;

        project-new = mkPoetryApplication {
          projectDir = ./projectDir; # Replace with actual project directory
        };

      in {
        packages = {
          inherit project-new;
        };
        defaultPackage = project-new;
      });
}

#+end_src 

Building your script

#+begin_src sh
nix build 
#+end_src 


Running your script

#+begin_src sh
./result/bin/runner # The executable is called runner because of what we named it in pyproject.toml
#+end_src 

* Reccomneded

Highly reccomnend setting up your poetry envrionment as well for well integrated repl develompent.  This means you will have a repl with all your poetry dependencies

#+begin_src nix


{
  description = "A simple poetry project";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
    flake-utils.url = "github:numtide/flake-utils";
    poetry2nix.url = "github:nix-community/poetry2nix";
  };

  outputs = { self, nixpkgs, flake-utils, poetry2nix }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
        inherit (poetry2nix.lib.mkPoetry2Nix { inherit pkgs; }) mkPoetryApplication;
        inherit (poetry2nix.lib.mkPoetry2Nix { inherit pkgs; }) mkPoetryEnv;

        project-new = mkPoetryApplication {
          projectDir = ./project-new; # Replace with actual project directory
        };
        dep-env = mkPoetryEnv {
          projectDir = ./project-new; # Replace with actual project directory
        };

      in {
        packages = {
          inherit project-new;
        };
        defaultPackage = project-new;
        devShells.default = pkgs.mkShell {
          packages = [dep-env];
         };
      });
}
#+end_src 

* Docker setup

Add the following to the let stmts above 

#+begin_src nix


dockerImage = pkgs.dockerTools.buildImage {
  name = "my-flake-docker-image";
  tag = "latest";
  config = {
    cmd = [ "${project-new}/bin/runner" ];
  };
};

# ...

packages = {
  docker = docker-image;
};

#+end_src 

** build

#+begin_src sh

# The output shold be a result pointing to a tar.gz file
nix build ./#docker

docker load < result 
#+end_src 

** run

#+begin_src sh
docker run my-flake-docker-image:latest
#+end_src 

Success!!

This is the basic setup for getting a python project up and running and packages into a docker container

* Adding python packages to poetry

I was having issues adding fastapi to poetry due to an issue with watchfiles 0.24.0 so I installed fastapi and unvicorn via nix instead
